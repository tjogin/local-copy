#!/usr/bin/env ruby -w
# Author: tomas@jogin.com
# Home: github.com/tjogin/local-copy
# License: BSD

require 'rubygems'
require 'optparse'
require 'nokogiri'
require 'open-uri'
require 'pp'

def download_and_replace( element, attribute, &block )
  path, filename = remote_resource element.attr(attribute)
  puts "Resource: #{path}"
  content = open(path).read rescue nil
  if content
    File.open(filename, 'w'){ |f| f.write content }
    if block_given?
      yield filename
    end
    if @options[:localize]
      resource_path = "file://" + File.join(Dir.pwd, filename)
    else
      resource_path = "/#{filename}"
    end
    element.set_attribute(attribute, resource_path)
    puts "-> Saved: #{filename}"
  else
    puts "-> Could not be downloaded"
  end
end

def remote_resource( resource_path )
  protocol, rest = @url.split("://")
  domain = rest.split("/").first
  url_base = "#{protocol}://#{domain}"
  
  filename = resource_path.split("/").last.split("?").first

  if resource_path =~ /^http/
    resource = resource_path
  elsif resource_path[0,1] == "/"
    resource = File.join url_base, resource_path
  else
    resource = File.join @url, resource_path
  end

  return [resource, filename]
end

@options = { :localize => false, :js => false, :css => false, :filename => "local-copy.html"}

opts = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options] URL"
  opts.on '-h', '--help', 'Display this screen' do
    puts opts
  end

  opts.on '-l', '--localize', 'Rewrite references to resources as file:// URLs' do
    @options[:js] = true
  end

  opts.on '-j', '--javascript', 'Make local copies of javascripts' do
    @options[:js] = true
  end

  opts.on '-c', '--css', 'Make local copies of stylesheets' do
    @options[:css] = true
  end

  opts.on '-f', '--file [filename]', 'Save URL to file by name' do |f|
    @options[:filename] = f || @options[:filename]
  end
end

begin
  opts.parse!
rescue Exception => e
  puts e.message.capitalize
  puts opts
  exit
end
if ARGV.size.zero?
  puts opts
  exit
end

@url = ARGV[0]

begin
  domain = @url.split("://").last.split("/").first.split(".")
  domain.shift if domain.first == "www"
rescue
  puts "Invalid URL"
  puts opts
  exit
end

@subdir = "#{domain.first}-local"

Dir.mkdir @subdir
Dir.chdir @subdir

@doc = Nokogiri::HTML(open(@url))

if @options[:localize]
  base_href = Nokogiri::XML::Node.new "base", @doc
  base_href.set_attribute "href", @url
  @doc.at_css('head').children.first.add_previous_sibling base_href
end

@doc.css('link').each do |element|
  if element.attr("rel").to_s == "stylesheet" && !element.attr("href").to_s.empty?
    download_and_replace element, "href"
  end
end if @options[:css]

@doc.css('script').each do |element|
  if !element.attr("src").to_s.empty?
    download_and_replace element, "src" do |filename|
      content = `jsbeautifier.py #{filename}`
      File.open(filename, 'w') do |file|
        file.write content
      end
    end
  end
end if @options[:js]

File.open( @options[:filename], 'w' ) { |f| f.write @doc.to_html }

puts "Local copy: #{@subdir}/#{@options[:filename]}"